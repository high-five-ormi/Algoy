name: Java CI/CD with Gradle

on:
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3.1.0

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle Wrapper
        run: ./gradlew clean build

      - name: List build directory
        run: ls -la build/libs

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: build/libs/*.jar

  dependency-submission:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Generate and submit dependency graph
        uses: gradle/actions/dependency-submission@v3.1.0

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # Remove the condition for push events since we're only triggering on pull requests now
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: List artifact directory
        run: ls -la

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_KEY }}" | tr -d '\r' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: SCP to EC2
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          scp -i ~/.ssh/id_rsa *.jar $EC2_USER@$EC2_HOST:/home/ubuntu

      - name: Run Java app
        env:
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          GOOGLE_REDIRECT_URI: ${{ secrets.GOOGLE_REDIRECT_URI }}
          AI_IP: ${{ secrets.AI_IP }}
          MYSQL_URL: jdbc:mysql://mymysql.cjee2s48u8zx.ap-northeast-2.rds.amazonaws.com/algoy?serverTimezone=UTC
          MYSQL_USERNAME: admin
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
        run: |
          if ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST '[ -f /home/ubuntu/web-pid ]'; then
            echo "Algoy-Web PID file exists. Terminating previous process."
            ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST 'kill -9 $(< /home/ubuntu/web-pid)'
          else
            echo "Algoy-Web PID file does not exist. Starting a new process."
          fi
          
          ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST "nohup java -jar /home/ubuntu/Algoy-Web-0.0.1-SNAPSHOT.jar \
            --server.port=8081 \
            --spring.datasource.url=$MYSQL_URL \
            --spring.datasource.username=$MYSQL_USERNAME \
            --spring.datasource.password=$MYSQL_PASSWORD \
            --spring.security.oauth2.client.registration.google.client-id=$GOOGLE_CLIENT_ID \
            --spring.security.oauth2.client.registration.google.client-secret=$GOOGLE_CLIENT_SECRET \
            --spring.security.oauth2.client.registration.google.redirect-uri=$GOOGLE_REDIRECT_URI \
            --ai-backend.url=$AI_IP \
            >/dev/null 2>&1 & echo \$! > /home/ubuntu/web-pid"
          
          ssh -i ~/.ssh/id_rsa $EC2_USER@$EC2_HOST 'ps -p $(< /home/ubuntu/web-pid) && echo "Algoy-Web process started" || echo "Failed to start Algoy-Web process"'
